# Numbers in python shell
python3

#  Basic Math Operations
x = 5
y = 10
z = 11
x + y

# in this case y will be multiply by z first and then x will be added - wrong way to do it
x + y * z

# in this case first x will be added into y and then it will be multiply by z - right way to do it
(x + y) * z
x + (y * z)
x + (y * z) - x

# higher precision - but should not be done like this 
40 + 2.23
99999999999999 + 1.1

# right way to do it
int(2.23) + int(40)
float(40) + float(2.23)

# operator overloading
'Earth' + 'P'

# if you write this than it will print in Tuple
x, y, z
x + y, y * z

# remainder
z % x

# power
z ** 2
2 ** 1000

# 
result = 1 / 3.0
result 

# repr
repr('Earth')

# str
str('Earth')

# print
print('Earth')

# Comparison Operators
1 < 2
1 > 2
5.0 == 5
4.0 != 5

# Chain Comparison Operators - Not a right way to do it
x < y < z

# Chain Comparison Operators - Right way to do it
x < y and y < z
x > y and y < z
x > y or y < z

#
1 == 2 < 3          # Wrong way to do it
1 == 2 and 2 < 3    # Right way to do it

# importing Math
import math

# math method floor
math.floor(3.5)
math.floor(3.6)
math.floor(-3.5)
math.floor(-3.4)

# math method trunc - it will round towards 0
math.trunc(2.8)
math.trunc(-2.8)

# scientific calculation
2 + 1j
2 + 1j * 3
(2 + 1j) * 3

# Octal base Numbers - base 8
0o20
oct(64)
int('20', 8)

# Hexadecimal - base 16
0xFF
hex(64)
int('64', 16)

# Binary - base 2
0b1000
bin(64)
int('1000', 2)

# Bitwise Operations
d = 1
d << 2          # left shift by 2 bits 
d | 2
d & 2

# importing random
import random

# random method
random.random()

# random integer
random.randint(1, 100)
random.randint(1000, 10000)

# random choice
random.choice(['lemon', 'masala', 'ginger', 'mint'])

# random shuffle
list1 = ['riddle', 'radiant', 'puzzle', 'Earth']
list1
random.shuffle(list1)
list1

# Decimal Problem
0.1 + 0.1 + 0.1
0.1 + 0.1 + 0.1 - 0.3
(0.1 + 0.1 + 0.1) - 0.3

# importing Decimal - more on decimal context manager
from decimal import Decimal

# Decimal method
Decimal('0.1') + Decimal('0.1') + Decimal('0.1')
Decimal('0.1') + Decimal('0.1') + Decimal('0.1') - Decimal('0.3')

# importing fractions
from fractions import Fraction

# Fraction
myFra = Fraction(2, 7)
myFra

# Set 
setone = {1, 2, 3, 4}

# Intersection
setone & {1, 3}

# Union
setone | {1, 3}
setone | {1, 3, 7}

# Differences
setone - {1, 3, 7}
setone - {1, 2, 3, 4}       # if you try to make differences with whole set then it will not return empty curly braces.
set()                       # empty set is defined like this

# type method
type({})                    # empty curly braces is type of dictionary
type({1, 2, 3, 4})          # type - set
type([])                    # type - list
type(())                    # type - tuple
type(True)                  # type - bool

# bool are 1 and 0 in python
True == 1                   # it will return True
False == 0                  # it will return True
True is 1                   # it will return False
False is 0                  # it will return False
True + 5                    # returns 6
True - 5                    # returns -4
False + 5                   # returns 5
False - 5                   # returns -5
False * 5                   # returns 0
